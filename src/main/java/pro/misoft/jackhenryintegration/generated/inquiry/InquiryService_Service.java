package pro.misoft.jackhenryintegration.generated.inquiry;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;
import jakarta.xml.ws.Service;

/**
 * Service Description for the InquiryService Interface
 *
 * This class was generated by Apache CXF 3.2.5
 * 2024-08-12T14:24:47.542+03:00
 * Generated source version: 3.2.5
 *
 */
@WebServiceClient(name = "InquiryService",
                  wsdlLocation = "file:./docs/API/TPG_Inquiry.wsdl",
                  targetNamespace = "http://jackhenry.com/jxchange/TPG/2008")
public class InquiryService_Service extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://jackhenry.com/jxchange/TPG/2008", "InquiryService");
    public final static QName InquiryServiceSoap = new QName("http://jackhenry.com/jxchange/TPG/2008", "InquiryServiceSoap");
    static {
        URL url = null;
        try {
            url = new URL("file:./docs/API/TPG_Inquiry.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(InquiryService_Service.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:./docs/API/TPG_Inquiry.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public InquiryService_Service(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public InquiryService_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public InquiryService_Service() {
        super(WSDL_LOCATION, SERVICE);
    }

    public InquiryService_Service(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public InquiryService_Service(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public InquiryService_Service(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns InquiryService
     */
    @WebEndpoint(name = "InquiryServiceSoap")
    public InquiryService getInquiryServiceSoap() {
        return super.getPort(InquiryServiceSoap, InquiryService.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns InquiryService
     */
    @WebEndpoint(name = "InquiryServiceSoap")
    public InquiryService getInquiryServiceSoap(WebServiceFeature... features) {
        return super.getPort(InquiryServiceSoap, InquiryService.class, features);
    }

}
